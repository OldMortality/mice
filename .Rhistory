par(mfrow=c(2,5))
real.pos <- floor(runif(1,min=1,max=11))
xl <- c(range(r)[1]*1.5,range(r)[2]*1.5)
xl <- c(-0.1,0.1)
for (i in 1:dim(rsim)[2]) {
if (i == real.pos) {
hist(r,main = "" ,15,xlim = xl)
} else {
hist(rsim[,i],main = "",15,xlim = xl)
}
}
return(real.pos)
}
policePlot(residuals(m.male),rsim)
# r: a vector of residuals (the real ones)
# sim.r   : matrix, each column is a set of simulated residuals
policePlot <- function(r,rsim,xl) {
par(mfrow=c(2,5))
real.pos <- floor(runif(1,min=1,max=11))
for (i in 1:dim(rsim)[2]) {
if (i == real.pos) {
hist(r,main = "" ,15,xlim = xl)
} else {
hist(rsim[,i],main = "",15,xlim = xl)
}
}
return(real.pos)
}
policePlot(residuals(m.male),rsim,xl= c(-0.1,0.1))
source('~/Documents/mice/createMiceDF.R')
##
## plots residuals~fitted, ~ type, ~ time
##
##   input: df=dataframe, fit=fitted, r=residuals
##
plots <- function(df,fit,r) {
par(mfrow=c(2,2))
col <- rep('black',dim(df)[1])
col[which(df$type=='T2')] <- 'red'
plot(r~fit,main="residuals ~ fitted",col=col)
abline(h=0,col='red')
boxplot(r~df$type,main='residuals~type')
boxplot(r~df$period,main='residuals~time')
}
r <- residuals(m.male)
p <- predict(m.male)
plots(df=mice.df,fit=p,r=r)
qqnorm(residuals(m.male,scale=T))
abline(0,1,col='red')
?scale
}
}
##
## plots residuals~fitted, ~ type, ~ time
##
##   input: df=dataframe, fit=fitted, r=residuals
##
plots <- function(df,fit,r,qq=NULL) {
par(mfrow=c(2,2))
col <- rep('black',dim(df)[1])
col[which(df$type=='T2')] <- 'red'
plot(r~fit,main="residuals ~ fitted",col=col)
abline(h=0,col='red')
boxplot(r~df$type,main='residuals~type')
boxplot(r~df$period,main='residuals~time')
if (qq) {
qqnorm(scale(r)
abline(0,1,col='red')
}
}
r <- residuals(m.male)
p <- predict(m.male)
plots(df=mice.df,fit=p,r=r)
# show fitted vs actual
f <- fitted(m)
par(mfrow=c(1,1))
plot(1:38,f,xlim=c(1,38),ylim=c(0,0.4),main='fitted vs observed (red) Normal model')
grid()
points(1:38,mice.df$y,col='red')
###
### Beta regression
###
library(glmmTMB)
m.beta <- glmmTMB(y~type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit"))
s <- summary(m.beta)
CI_lower <- s$coefficients$cond[,1] - 1.67*s$coefficients$cond[,2]
CI_upper <- s$coefficients$cond[,1] + 1.67*s$coefficients$cond[,2]
cbind(exp(CI_lower),exp(CI_upper))
# police method
par(mfrow=c(2,5))
real.pos <- floor(runif(1,min=1,max=11))
for (i in 1:10) {
y.sim <- unlist(simulate(m.beta))
m.sim <- lmer(y.sim~type * period + (1|mouse) , data=mice.df)
if (i == real.pos) {
hist(residuals(m.beta),main="",15,xlim=c(-0.1,0.1))
} else {
hist(residuals(m.sim),main="",15,xlim=c(-0.1,0.1))
}
}
# show fitted vs actual
f.beta <- fitted(m.beta)
par(mfrow=c(1,1))
plot(1:38,f.beta,ylim=c(0,.4),main='fitted vs observed(red), beta-regression')
grid()
points(1:38,mice.df$y,col='red')
plots(d=mice.df,p=predict(m.beta),r=residuals(m.beta))
if (qq) {
qqnorm(scale(r))
abline(0,1,col='red')
}
##
## plots residuals~fitted, ~ type, ~ time
##
##   input: df=dataframe, fit=fitted, r=residuals
##
plots <- function(df,fit,r,qq=NULL) {
par(mfrow=c(2,2))
col <- rep('black',dim(df)[1])
col[which(df$type=='T2')] <- 'red'
plot(r~fit,main="residuals ~ fitted",col=col)
abline(h=0,col='red')
boxplot(r~df$type,main='residuals~type')
boxplot(r~df$period,main='residuals~time')
if (qq) {
qqnorm(scale(r))
abline(0,1,col='red')
}
}
plots(df=mice.df,fit=p,r=r,qq=T)
source('~/Documents/mice/createMiceDF.R')
# show fitted vs actual
f <- fitted(m.male)
par(mfrow=c(1,1))
plot(1:38,f,xlim=c(1,38),ylim=c(0,0.4),main='fitted vs observed (red) Normal model')
grid()
points(1:38,mice.df$y,col='red')
###
### Beta regression
###
library(glmmTMB)
m.beta <- glmmTMB(y~type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit"))
s <- summary(m.beta)
###
### Beta regression
###
library(glmmTMB)
m.beta <- glmmTMB(y~type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit"))
s <- summary(m.beta)
###
### Beta regression
###
library(glmmTMB)
m.beta <- glmmTMB(y~type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit"))
source('~/Documents/mice/mouse_newglm.R', echo=TRUE)
s <- summary(m.beta)
# exp to get ORs
exp(getCI(m,Z) )
y.sim <- simulate(m.beta,nsim=10)
rsim <- matrix(nrow = dim(y.sim)[1],ncol=10)
for (i in 1:10) {
r <- residuals(glmTMB( unlist(y.sim[i]) ~ type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit")))
rsim[,i] <- r
}
###
### Beta regression
###
library(glmmTMB)
m.beta <- glmmTMB(y~type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit"))
s <- summary(m.beta)
y.sim <- simulate(m.beta,nsim=10)
rsim <- matrix(nrow = dim(y.sim)[1],ncol=10)
for (i in 1:10) {
r <- residuals(glmTMB( unlist(y.sim[i]) ~ type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit")))
rsim[,i] <- r
}
for (i in 1:10) {
r <- residuals(glmmTMB( unlist(y.sim[i]) ~ type * factor(period)  + (1|mouse),
data=mice.df, family=list(family="beta",link="logit")))
rsim[,i] <- r
}
policePlot(residuals(m.beta),rsim,xl= c(-0.1,0.1))
policePlot(residuals(m.beta),rsim,xl= c(-0.1,0.1))
source('~/Documents/mice/createMiceDF.R')
# r: a vector of residuals (the real ones)
# sim.r   : matrix, each column is a set of simulated residuals
# xl are the limits on the x-axis
policePlot <- function(r,rsim,xl) {
par(mfrow=c(2,5))
real.pos <- floor(runif(1,min=1,max=11))
for (i in 1:dim(rsim)[2]) {
if (i == real.pos) {
hist(r,main = "" ,15,xlim = xl,xlab='*')
} else {
hist(rsim[,i],main = "",15,xlim = xl,xlab="")
}
}
return(real.pos)
}
policePlot(residuals(m.beta),rsim,xl= c(-0.1,0.1))
policePlot(residuals(m.beta),rsim,xl= c(-0.1,0.1))
plots(df=mice.df,fit=predict(m.lm),r=r <- residuals(m.lm),qq=T)
plots(df=mice.df,fit=predict(m.beta),r=r <- residuals(m.beta),qq=F)
plots(df=mice.df,fit=predict(m.beta),r=residuals(m.beta))
# show fitted vs actual
f.beta <- fitted(m.beta)
par(mfrow=c(1,1))
plot(1:38,f.beta,ylim=c(0,.4),main='fitted vs observed(red), beta-regression')
grid()
points(1:38,mice.df$y,col='red')
plots(df=mice.df,fit=predict(m.beta),r=residuals(m.beta))
plot(1:38,f.beta,ylim=c(0,.4),main='fitted vs observed(red), beta-regression')
par(mfrow=c(1,1))
plot(1:38,f.beta,ylim=c(0,.4),main='fitted vs observed(red), beta-regression')
points(1:38,fitted(lm),col='red')
fitted(lm)
lm
points(1:38,fitted(m.lm),col='red')
plot(1:38,f.beta,ylim=c(0,.4),main='fitted lm vs beta regression(red)')
points(1:38,fitted(m.lm),col='red')
df.mice
logit(3)
logit <- function(x) {
return(x/(1-x))
}
logit(0.5)
logit(100)
logit(1)
logit(0.99)
?stopifnot
source('~/Documents/mice/createMiceDF.R')
logit <- function(x) {
stopifnot(x<1,x>0)
return(x/(1-x))
}
logit(3)
logit(0.9)
logit <- function(x) {
stopifnot(x<1,x>0)
return(x/(1-x))
}
##
## linear model on the logit scale
##
##
mice.df$logity <- logit(mice.df$y)
##
## linear model on the logit scale
##
##
mice.df$logity <- logit(mice.df$y)
m <- lmer(logity ~ type * factor(period) +  (1|mouse) , data=mice.df)
getCI(m.lm,Z)
r <- residuals(m.lm)
y.sim <- simulate(m.lm,nsim=10)
rsim <- matrix(nrow = dim(y.sim)[1],ncol=10)
for (i in 1:10) {
r <- residuals(lmer( unlist(y.sim[i]) ~ type * factor(period) +  (1|mouse) , data=mice.df))
rsim[,i] <- r
}
policePlot(residuals(m.lm),rsim,xl= c(-0.1,0.1))
policePlot(residuals(m.lm),rsim,xl= c(-0.1,0.1))
plots(df=mice.df,fit=predict(m.lm),r=r <- residuals(m.lm),qq=T)
# show fitted vs actual
f <- fitted(m.lm)
par(mfrow=c(1,1))
plot(1:38,f,xlim=c(1,38),ylim=c(0,0.4),main='fitted vs observed (red) Normal model')
grid()
points(1:38,mice.df$y,col='red')
# show fitted vs actual
f <- fitted(m.lm)
f
##
## linear model on the logit scale
##
##
mice.df$logity <- logit(mice.df$y)
m.lm <- lmer(logity ~ type * factor(period) +  (1|mouse) , data=mice.df)
fitted(m.lm)
mice.df$logity
plot(mice.df$y,mice.df$logity)
abline(0,1,col='red')
curve(logit(x))
curve(logit(x),-0.99,0.99)
curve(logit(x),0.01,0.99)
points(mice.df$y,mice.df$logity,col='red')
logit(0.2)
logit(0.4)
logit(0.1)
plots(df=mice.df,fit=invlogit(predict(m.lm)),r=r <- residuals(m.lm),qq=T)
source('~/Documents/mice/createMiceDF.R')
logit <- function(x) {
stopifnot(x<1,x>0)
return(log(x/(1-x)))
}
invlogit <- function(x) {
return(1/(1+exp(-x)))
}
logit(invlogit(3))
logit(invlogit(2))
logit <- function(x) {
stopifnot(x<1,x>0)
return(log(x/(1-x)))
}
c
##
## linear model on the logit scale
##
##
mice.df$logity <- logit(mice.df$y)
mice.df$logity
m.lm <- lmer(logity ~ type * factor(period) +  (1|mouse) , data=mice.df)
getCI(m.lm,Z)
exp(getCI(m.lm,Z))
r <- residuals(m.lm)
y.sim <- simulate(m.lm,nsim=10)
rsim <- matrix(nrow = dim(y.sim)[1],ncol=10)
for (i in 1:10) {
r <- residuals(lmer( unlist(y.sim[i]) ~ type * factor(period) +  (1|mouse) , data=mice.df))
rsim[,i] <- r
}
policePlot(residuals(m.lm),rsim,xl= c(-0.1,0.1))
policePlot(residuals(m.lm),rsim,xl= c(-0.1,0.1))
policePlot(residuals(m.lm),rsim,xl= c(-3,3))
policePlot(residuals(m.lm),rsim,xl= c(-2,2))
policePlot(residuals(m.lm),rsim,xl= c(-1,1))
# show fitted vs actual
f <- invlogit(fitted(m.lm))
# show fitted vs actual
f <- invlogit(fitted(m.lm))
par(mfrow=c(1,1))
plot(1:38,f,xlim=c(1,38),ylim=c(0,0.4),main='fitted vs observed (red) Normal model')
grid()
points(1:38,mice.df$y,col='red')
points(1:38,fitted(m.beta),col='blue')
legend(20,.04,
c('logit lm,','beta','lm'),
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red"))
legend(20,.4,
c('logit lm,','beta','lm'),
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red"))
# show fitted vs actual
f <- invlogit(fitted(m.lm))
par(mfrow=c(1,1))
plot(1:38,f,xlim=c(1,38),ylim=c(0,0.4),main='fitted vs observed')
grid()
points(1:38,mice.df$y,col='red')
points(1:38,fitted(m.beta),col='blue')
legend(20,.4,
c('logit lm,','beta','lm'),
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),col=c("black","blue","red"))
##
## linear model on the logit scale
##
##
mice.df$logity <- logit(mice.df$y)
m.lm <- lmer(logity ~ type * factor(period) +  (1|mouse) , data=mice.df)
exp(getCI(m.lm,Z))
y.sim <- simulate(m.lm,nsim=10)
rsim <- matrix(nrow = dim(y.sim)[1],ncol=10)
for (i in 1:10) {
r <- residuals(lmer( unlist(y.sim[i]) ~ type * factor(period) +  (1|mouse) , data=mice.df))
rsim[,i] <- r
}
policePlot(residuals(m.lm),rsim,xl= c(-1,1))
plots(df=mice.df,fit=invlogit(predict(m.lm)),r=r <- residuals(m.lm),qq=T)
timesResiduals <- function(r,df) {
df <- mice.df
r <- residuals(m)
mice <- unique(df$mouse)
par(mfrow=c(2,3))
for (t in 2:5) {
plot('',xlim=c(-0.3,0.3),ylim=c(-0.3,0.3),main=paste('t=',t))
abline(h=0,col='red')
abline(v=0,col='red')
for (mouse in mice) {
x = which(df$mouse==mouse & df$period == t)
y = which(df$mouse==mouse & df$period == t-1)
if (length(x)==1 & length(y)==1)
points(r[x],r[y],pch='x')
}
}
}
##
## Plots to show autocorrelation of residuals
##
timesResiduals <- function(r,df) {
df <- mice.df
r <- residuals(m)
mice <- unique(df$mouse)
par(mfrow=c(2,3))
for (t in 2:5) {
plot('',xlim=c(-0.3,0.3),ylim=c(-0.3,0.3),main=paste('t=',t))
abline(h=0,col='red')
abline(v=0,col='red')
for (mouse in mice) {
x = which(df$mouse==mouse & df$period == t)
y = which(df$mouse==mouse & df$period == t-1)
if (length(x)==1 & length(y)==1)
points(r[x],r[y],pch='x')
}
}
}
timesResiduals(residuals(m.lm),df.mice)
timesResiduals <- function(r,df,main) {
df <- mice.df
r <- residuals(m)
mice <- unique(df$mouse)
par(mfrow=c(2,3))
for (t in 2:5) {
plot('',xlim=c(-0.3,0.3),ylim=c(-0.3,0.3),
main=paste(main,'t=',t))
abline(h=0,col='red')
abline(v=0,col='red')
for (mouse in mice) {
x = which(df$mouse==mouse & df$period == t)
y = which(df$mouse==mouse & df$period == t-1)
if (length(x)==1 & length(y)==1)
points(r[x],r[y],pch='x')
}
}
}
timesResiduals(residuals(m),df.mice,"logit lm")
##
## Plots to show autocorrelation of residuals
##
timesResiduals <- function(r,df,main) {
df <- mice.df
r <- residuals(m)
mice <- unique(df$mouse)
par(mfrow=c(2,3))
for (t in 2:5) {
plot('',xlim=c(-0.3,0.3),ylim=c(-0.3,0.3),
main=paste(main,'t=',t))
abline(h=0,col='red')
abline(v=0,col='red')
for (mouse in mice) {
x = which(df$mouse==mouse & df$period == t)
y = which(df$mouse==mouse & df$period == t-1)
if (length(x)==1 & length(y)==1)
points(r[x],r[y],pch='x')
}
}
}
source('~/Documents/mice/createMiceDF.R')
source('~/Documents/mice/createMiceDF.R')
m.lm <- lmer(y ~ type * factor(period) +  (1|mouse) , data=mice.df)
timesResiduals(m.lm,main='lm')
m.lm <- lmer(y ~ type * factor(period) +  (1|mouse) , data=mice.df)
getCI(m.lm,Z)
r <- residuals(m.lm)
timesResiduals(m.lm,main='lm')
timesResiduals(m.beta,main='beta')
timesResiduals(m.beta,main='beta')
##
## Plots to show autocorrelation of residuals
##
timesResiduals <- function(r,df,main) {
df <- mice.df
mice <- unique(df$mouse)
par(mfrow=c(2,3))
for (t in 2:5) {
plot('',xlim=c(-0.3,0.3),ylim=c(-0.3,0.3),
main=paste(main,'t=',t))
abline(h=0,col='red')
abline(v=0,col='red')
for (mouse in mice) {
x = which(df$mouse==mouse & df$period == t)
y = which(df$mouse==mouse & df$period == t-1)
if (length(x)==1 & length(y)==1)
points(r[x],r[y],pch='x')
}
}
}
timesResiduals(m.beta,main='beta',df=mice.df)
source('~/Documents/mice/createMiceDF.R')
timesResiduals(residuals(m.beta),df=mice.df,main='beta')
##
## Plots to show autocorrelation of residuals
##
timesResiduals <- function(r,df,main) {
df <- mice.df
mice <- unique(df$mouse)
par(mfrow=c(2,2))
for (t in 2:5) {
plot('',xlim=c(-0.3,0.3),ylim=c(-0.3,0.3),
main=paste(main,'t=',t))
abline(h=0,col='red')
abline(v=0,col='red')
for (mouse in mice) {
x = which(df$mouse==mouse & df$period == t)
y = which(df$mouse==mouse & df$period == t-1)
if (length(x)==1 & length(y)==1)
points(r[x],r[y],pch='x')
}
}
}
timesResiduals(residuals(m.beta),df=mice.df,main='beta')
timesResiduals(residuals(m.lm),df=mice.df,main='lm')
timesResiduals(residuals(m.beta),df=mice.df,main='beta')
timesResiduals(residuals(m.beta),df=mice.df,main='logit lm')
source('~/Documents/mice/createMiceDF.R')
